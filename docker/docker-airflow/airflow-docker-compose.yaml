version: '3'

x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: <use_var_on_env_file>
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: <use_var_on_env_file>
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: <use_var_on_env_file>
    AIRFLOW__CORE__FERNET_KEY: <use_var_on_env_file>
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: <use_var_on_env_file>
    AIRFLOW__CORE__LOAD_EXAMPLES: <use_var_on_env_file>
    AIRFLOW__API__AUTH_BACKENDS: <use_var_on_env_file>
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: <use_var_on_env_file>
  env_file:
    - .env
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./credentials:/opt/airflow/credentials
    - ./scripts:/opt/airflow/scripts
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(PYTHONPATH=. python -c "import airflow; print(airflow.__version__)")
        airflow db init
        airflow users create \
          --username <insert_airflow_username_or_use_var_on_env_file> \
          --firstname <insert_airflow_firstname_or_use_var_on_env_file> \
          --lastname <insert_airflow_lastname_or_use_var_on_env_file> \
          --role <insert_airflow_admin_or_use_var_on_env_file> \
          --email <insert_email_or_use_var_on_env_file> \
          --password <insert_airflow_password_or_use_var_on_env_file>
        exit 0
    environment:
      <<: *airflow-common-env
    restart: on-failure

volumes:
  postgres-db-volume: